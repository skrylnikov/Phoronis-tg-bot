// Features Controller - –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –≤—Å–µ—Ö —Ñ–∏—á

import { Composer } from "grammy";
import { prisma } from "../db";
import { sendSelfieSaturdayMessage } from "../features/selfie-saturday";
import { sendInktoberMessage } from "../features/inktober";
import { BotContext } from "../bot";

export const featuresController = new Composer<BotContext>();

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async function isAdmin(ctx: BotContext): Promise<boolean> {
  if (!ctx.chat || ctx.chat.type === "private") {
    return false;
  }
  if (!ctx.from) {
    return false;
  }

  const member = await ctx.getChatMember(ctx.from.id);
  return ["administrator", "creator"].includes(member.status);
}

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Ñ–∏—á
featuresController.command("enable", async (ctx) => {
  const feature = ctx.match?.toLowerCase();
  
  if (!ctx.chat || ctx.chat.type === "private") {
    await ctx.reply("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.");
    return;
  }

  if (!(await isAdmin(ctx))) {
    await ctx.reply("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –≤–∫–ª—é—á–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏.");
    return;
  }

  try {
    if (feature === "selfiesaturday") {
      await prisma.chat.upsert({
        where: { id: BigInt(ctx.chat.id) },
        update: { selfieSaturdayEnabled: true },
        create: {
          id: BigInt(ctx.chat.id),
          title: ctx.chat.title || "Unknown Group",
          chatType: ctx.chat.type === "supergroup" ? "GROUP" : "GROUP",
          selfieSaturdayEnabled: true,
        },
      });
      await ctx.reply("–§—É–Ω–∫—Ü–∏—è '–°–µ–ª—Ñ–∏ –°—É–±–±–æ—Ç–∞' –≤–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞! üéâ");
    } else if (feature === "inktober") {
      await prisma.chat.upsert({
        where: { id: BigInt(ctx.chat.id) },
        update: { inktoberEnabled: true },
        create: {
          id: BigInt(ctx.chat.id),
          title: ctx.chat.title || "Unknown Group",
          chatType: ctx.chat.type === "supergroup" ? "GROUP" : "GROUP",
          inktoberEnabled: true,
        },
      });
      await ctx.reply("–§—É–Ω–∫—Ü–∏—è 'Inktober' –≤–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞! üé®");
    } else {
      await ctx.reply("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: selfiesaturday, inktober\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /enable <–Ω–∞–∑–≤–∞–Ω–∏–µ_—Ñ—É–Ω–∫—Ü–∏–∏>");
    }
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ ${feature}:`, error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏.");
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è —Ñ–∏—á
featuresController.command("disable", async (ctx) => {
  const feature = ctx.match?.toLowerCase();
  
  if (!ctx.chat || ctx.chat.type === "private") {
    await ctx.reply("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.");
    return;
  }

  if (!(await isAdmin(ctx))) {
    await ctx.reply("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –≤—ã–∫–ª—é—á–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏.");
    return;
  }

  try {
    if (feature === "selfiesaturday") {
      await prisma.chat.update({
        where: { id: BigInt(ctx.chat.id) },
        data: { selfieSaturdayEnabled: false },
      });
      await ctx.reply("–§—É–Ω–∫—Ü–∏—è '–°–µ–ª—Ñ–∏ –°—É–±–±–æ—Ç–∞' –≤—ã–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞.");
    } else if (feature === "inktober") {
      await prisma.chat.update({
        where: { id: BigInt(ctx.chat.id) },
        data: { inktoberEnabled: false },
      });
      await ctx.reply("–§—É–Ω–∫—Ü–∏—è 'Inktober' –≤—ã–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞.");
    } else {
      await ctx.reply("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: selfiesaturday, inktober\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /disable <–Ω–∞–∑–≤–∞–Ω–∏–µ_—Ñ—É–Ω–∫—Ü–∏–∏>");
    }
  } catch (error: any) {
    if (error.code === 'P2025') {
      await ctx.reply(`–§—É–Ω–∫—Ü–∏—è '${feature}' —É–∂–µ –±—ã–ª–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞ –∏–ª–∏ —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    } else {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ ${feature}:`, error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏.");
    }
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏—á
featuresController.command("test", async (ctx) => {
  const feature = ctx.match?.toLowerCase();
  
  if (!ctx.chat || ctx.chat.type === "private") {
    await ctx.reply("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.");
    return;
  }

  if (!(await isAdmin(ctx))) {
    await ctx.reply("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏.");
    return;
  }

  try {
    if (feature === "selfiesaturday") {
      await ctx.reply("–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è '–°–µ–ª—Ñ–∏ –°—É–±–±–æ—Ç–∞'...");
      await sendSelfieSaturdayMessage(ctx.chat.id);
    } else if (feature === "inktober") {
      await ctx.reply("–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è 'Inktober'...");
      await sendInktoberMessage(ctx.chat.id);
    } else {
      await ctx.reply("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: selfiesaturday, inktober\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /test <–Ω–∞–∑–≤–∞–Ω–∏–µ_—Ñ—É–Ω–∫—Ü–∏–∏>");
    }
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ ${feature}:`, error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏.");
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö —Ñ–∏—á
featuresController.command("status", async (ctx) => {
  if (!ctx.chat || ctx.chat.type === "private") {
    await ctx.reply("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.");
    return;
  }

  if (!(await isAdmin(ctx))) {
    await ctx.reply("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ñ—É–Ω–∫—Ü–∏–π.");
    return;
  }

  try {
    const chat = await prisma.chat.findUnique({
      where: { id: BigInt(ctx.chat.id) },
      select: {
        selfieSaturdayEnabled: true,
        inktoberEnabled: true,
      }
    });

    if (!chat) {
      await ctx.reply("–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.");
      return;
    }

    const status = `üìä –°—Ç–∞—Ç—É—Å —Ñ—É–Ω–∫—Ü–∏–π –≤ —ç—Ç–æ–º —á–∞—Ç–µ:\n\n` +
      `üéâ –°–µ–ª—Ñ–∏ –°—É–±–±–æ—Ç–∞: ${chat.selfieSaturdayEnabled ? '‚úÖ –í–∫–ª—é—á–µ–Ω–∞' : '‚ùå –í—ã–∫–ª—é—á–µ–Ω–∞'}\n` +
      `üé® Inktober: ${chat.inktoberEnabled ? '‚úÖ –í–∫–ª—é—á–µ–Ω–∞' : '‚ùå –í—ã–∫–ª—é—á–µ–Ω–∞'}\n\n` +
      `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥:\n` +
      `/enable <—Ñ—É–Ω–∫—Ü–∏—è> - –≤–∫–ª—é—á–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é\n` +
      `/disable <—Ñ—É–Ω–∫—Ü–∏—è> - –≤—ã–∫–ª—é—á–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é\n` +
      `/test <—Ñ—É–Ω–∫—Ü–∏—è> - –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é\n` +
      `/status - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Å—Ç–∞—Ç—É—Å`;

    await ctx.reply(status);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ñ—É–Ω–∫—Ü–∏–π:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ñ—É–Ω–∫—Ü–∏–π.");
  }
});
