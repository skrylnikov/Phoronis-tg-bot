// Selfie Saturday Controller 

import { Composer } from "grammy";
import { prisma } from "../db";
import { sendSelfieSaturdayMessage } from "../features/selfie-saturday";
import { BotContext } from "../bot"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º BotContext

export const selfieSaturdayController = new Composer<BotContext>();

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async function isAdmin(ctx: BotContext): Promise<boolean> {
  if (!ctx.chat || ctx.chat.type === "private") {
    return false;
  }
  if (!ctx.from) {
    return false;
  }

  const member = await ctx.getChatMember(ctx.from.id);
  return ["administrator", "creator"].includes(member.status);
}

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –°–µ–ª—Ñ–∏ –°—É–±–±–æ—Ç—ã
selfieSaturdayController.command("enable", async (ctx) => {
  const feature = ctx.match?.toLowerCase();
  if (feature !== "selfiesaturday") return;

  if (!ctx.chat || ctx.chat.type === "private") {
    await ctx.reply("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.");
    return;
  }

  if (!(await isAdmin(ctx))) {
    await ctx.reply("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –≤–∫–ª—é—á–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.");
    return;
  }

  try {
    await prisma.chat.upsert({
      where: { id: BigInt(ctx.chat.id) },
      update: { selfieSaturdayEnabled: true },
      create: {
        id: BigInt(ctx.chat.id),
        title: ctx.chat.title || "Unknown Group",
        chatType: ctx.chat.type === "supergroup" ? "GROUP" : "GROUP",
        selfieSaturdayEnabled: true,
      },
    });
    await ctx.reply("–§—É–Ω–∫—Ü–∏—è '–°–µ–ª—Ñ–∏ –°—É–±–±–æ—Ç–∞' –≤–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞! üéâ");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –°–µ–ª—Ñ–∏ –°—É–±–±–æ—Ç—ã:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏.");
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è –°–µ–ª—Ñ–∏ –°—É–±–±–æ—Ç—ã
selfieSaturdayController.command("disable", async (ctx) => {
  const feature = ctx.match?.toLowerCase();
  if (feature !== "selfiesaturday") return;

  if (!ctx.chat || ctx.chat.type === "private") {
    await ctx.reply("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.");
    return;
  }

  if (!(await isAdmin(ctx))) {
    await ctx.reply("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –≤—ã–∫–ª—é—á–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.");
    return;
  }

  try {
    await prisma.chat.update({
      where: { id: BigInt(ctx.chat.id) },
      data: { selfieSaturdayEnabled: false },
    });
    await ctx.reply("–§—É–Ω–∫—Ü–∏—è '–°–µ–ª—Ñ–∏ –°—É–±–±–æ—Ç–∞' –≤—ã–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞.");
  } catch (error: any) {
    if (error.code === 'P2025') {
      await ctx.reply("–§—É–Ω–∫—Ü–∏—è '–°–µ–ª—Ñ–∏ –°—É–±–±–æ—Ç–∞' —É–∂–µ –±—ã–ª–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞ –∏–ª–∏ —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    } else {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –°–µ–ª—Ñ–∏ –°—É–±–±–æ—Ç—ã:", error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏.");
    }
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –°–µ–ª—Ñ–∏ –°—É–±–±–æ—Ç—ã
selfieSaturdayController.command("test", async (ctx) => {
  const feature = ctx.match?.toLowerCase();
  if (feature !== "selfiesaturday") return;

  if (!ctx.chat || ctx.chat.type === "private") {
    await ctx.reply("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.");
    return;
  }

  if (!(await isAdmin(ctx))) {
    await ctx.reply("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.");
    return;
  }

  try {
    await ctx.reply("–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è '–°–µ–ª—Ñ–∏ –°—É–±–±–æ—Ç–∞'...");
    await sendSelfieSaturdayMessage(ctx.chat.id);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –°–µ–ª—Ñ–∏ –°—É–±–±–æ—Ç—ã:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏.");
  }
}); 
