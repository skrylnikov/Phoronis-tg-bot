import { ChatOpenAI } from "@langchain/openai";
import { PromptTemplate } from "@langchain/core/prompts";
import { StringOutputParser } from "@langchain/core/output_parsers";
import { openRouterToken } from "../config"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
import { bot } from "../bot"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
import { logger } from "../logger"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä

// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –º–æ–¥–µ–ª—å, —á—Ç–æ –∏ –≤ chat-generation
const geminiFlash2 = new ChatOpenAI({
  model: "google/gemini-2.5-flash-lite",
  apiKey: openRouterToken,
  configuration: {
    baseURL: "https://openrouter.ai/api/v1",
  },
  temperature: 1, // –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –ø–æ–≤—ã—à–µ –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
});

// –ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
const promptTemplate = PromptTemplate.fromTemplate(
  `–ü—Ä–∏–¥—É–º–∞–π –∫–æ—Ä–æ—Ç–∫–æ–µ –∏ –≤–µ—Å–µ–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–º –ø–æ–¥—Ç–µ–∫—Å—Ç–æ–º –¥–ª—è —á–∞—Ç–∞, –ø—Ä–∏–∑—ã–≤–∞—é—â–µ–µ –ª—é–¥–µ–π –ø–æ—Å—Ç–∏—Ç—å —Å–≤–æ–∏ —Å–µ–ª—Ñ–∏ –≤ —Å—É–±–±–æ—Ç—É.
  –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤—å —Ö—ç—à—Ç–µ–≥ #—Å–µ–ª—Ñ–∏—Å—É–±–±–æ—Ç–∞ –∏ –æ–¥–∏–Ω –¥—É—Ä–∞—Ü–∫–∏–π —ç–º–æ–¥–∑–∏.
  –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π markdown.`
);

const outputParser = new StringOutputParser();

const chain = promptTemplate.pipe(geminiFlash2).pipe(outputParser);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
async function generateSelfieMessage(): Promise<string> {
  try {
    const message = await chain.invoke({});
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (!message.includes("#—Å–µ–ª—Ñ–∏—Å—É–±–±–æ—Ç–∞")) {
        return message + "\n#—Å–µ–ª—Ñ–∏—Å—É–±–±–æ—Ç–∞"; // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö–µ—à—Ç–µ–≥–∞
    }
    return message;
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –°–µ–ª—Ñ–∏ –°—É–±–±–æ—Ç—ã:", error);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    return "–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç! –°–µ–≥–æ–¥–Ω—è —Å—É–±–±–æ—Ç–∞, –≤—Ä–µ–º—è –¥–ª—è —Å–µ–ª—Ñ–∏! ü§™\n#—Å–µ–ª—Ñ–∏—Å—É–±–±–æ—Ç–∞";
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Ç
export async function sendSelfieSaturdayMessage(chatId: number | bigint): Promise<void> {
  const message = await generateSelfieMessage();
  try {
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ chatId - —ç—Ç–æ number –∏–ª–∏ string –¥–ª—è API Telegram
    const targetChatId = typeof chatId === 'bigint' ? Number(chatId) : chatId;
    await bot.api.sendMessage(targetChatId, message);
    logger.info(`–°–æ–æ–±—â–µ–Ω–∏–µ –°–µ–ª—Ñ–∏ –°—É–±–±–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç ${targetChatId}`);
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –°–µ–ª—Ñ–∏ –°—É–±–±–æ—Ç—ã –≤ —á–∞—Ç ${chatId}:`, error);
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–∫–ª—é—á–∏—Ç—å —Ñ–∏—á—É –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞, –µ—Å–ª–∏ –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
  }
} 
